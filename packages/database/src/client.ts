import { createClient, type SupabaseClient } from '@supabase/supabase-js'

// Type-safe Supabase client
export type TypedSupabaseClient = SupabaseClient<any>

// Browser client for client-side operations
export function createBrowserClient(): TypedSupabaseClient {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

  if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error('Missing Supabase environment variables')
  }

  return createClient(supabaseUrl, supabaseAnonKey, {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
  })
}

// Server client for server-side operations 
export function createServerClient(
  cookieStore?: {
    get: (key: string) => { value: string } | undefined
    set: (key: string, value: string, options?: any) => void
  }
): TypedSupabaseClient {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

  if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error('Missing Supabase environment variables')
  }

  return createClient(supabaseUrl, supabaseAnonKey, {
    auth: {
      persistSession: false,
    },
    global: {
      headers: {
        'Cache-Control': 'no-cache',
      },
    },
  })
}

// Service role client for privileged operations (webhooks, admin tasks)
export function createServiceClient(): TypedSupabaseClient {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
  const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY

  if (!supabaseUrl || !serviceRoleKey) {
    throw new Error('Missing Supabase service role environment variables')
  }

  return createClient<Database>(supabaseUrl, serviceRoleKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false,
    },
  })
}

// Helper function for service role operations
export async function withServiceRole<T>(
  operation: (client: TypedSupabaseClient) => Promise<T>
): Promise<T> {
  const serviceClient = createServiceClient()
  return await operation(serviceClient)
}

// Database types (will be generated by Supabase CLI)
export interface Database {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string
          username: string | null
          full_name: string | null
          avatar_url: string | null
          created_at: string
        }
        Insert: {
          id: string
          username?: string | null
          full_name?: string | null
          avatar_url?: string | null
          created_at?: string
        }
        Update: {
          id?: string
          username?: string | null
          full_name?: string | null
          avatar_url?: string | null
          created_at?: string
        }
      }
      events: {
        Row: {
          id: string
          organizer_id: string
          title: string
          description: string | null
          image_url: string | null
          category: string | null
          start_date: string
          end_date: string
          venue_name: string
          venue_address: string | null
          created_at: string
        }
        Insert: {
          id?: string
          organizer_id: string
          title: string
          description?: string | null
          image_url?: string | null
          category?: string | null
          start_date: string
          end_date: string
          venue_name: string
          venue_address?: string | null
          created_at?: string
        }
        Update: {
          id?: string
          organizer_id?: string
          title?: string
          description?: string | null
          image_url?: string | null
          category?: string | null
          start_date?: string
          end_date?: string
          venue_name?: string
          venue_address?: string | null
          created_at?: string
        }
      }
      ticket_types: {
        Row: {
          id: string
          event_id: string
          name: string
          price: number
          quantity_available: number
          created_at: string
        }
        Insert: {
          id?: string
          event_id: string
          name: string
          price: number
          quantity_available: number
          created_at?: string
        }
        Update: {
          id?: string
          event_id?: string
          name?: string
          price?: number
          quantity_available?: number
          created_at?: string
        }
      }
      orders: {
        Row: {
          id: string
          buyer_id: string
          event_id: string
          status: 'pending' | 'paid' | 'failed' | 'refunded'
          total_amount: number
          payment_provider: string | null
          provider_session_id: string | null
          created_at: string
        }
        Insert: {
          id?: string
          buyer_id: string
          event_id: string
          status: 'pending' | 'paid' | 'failed' | 'refunded'
          total_amount: number
          payment_provider?: string | null
          provider_session_id?: string | null
          created_at?: string
        }
        Update: {
          id?: string
          buyer_id?: string
          event_id?: string
          status?: 'pending' | 'paid' | 'failed' | 'refunded'
          total_amount?: number
          payment_provider?: string | null
          provider_session_id?: string | null
          created_at?: string
        }
      }
      tickets: {
        Row: {
          id: string
          ticket_type_id: string
          event_id: string
          order_id: string
          owner_id: string
          unique_qr_code: string
          is_used: boolean
          purchased_at: string
        }
        Insert: {
          id?: string
          ticket_type_id: string
          event_id: string
          order_id: string
          owner_id: string
          unique_qr_code: string
          is_used?: boolean
          purchased_at?: string
        }
        Update: {
          id?: string
          ticket_type_id?: string
          event_id?: string
          order_id?: string
          owner_id?: string
          unique_qr_code?: string
          is_used?: boolean
          purchased_at?: string
        }
      }
    }
  }
}